---
import { Icon } from 'astro-icon/components';

interface Props {
	variant?: 'primary' | 'secondary' | 'tertiary' | 'link' | undefined;
	class?: string;
	target?: string;
	type?: 'button' | 'submit' | 'reset';
	text?: string;
	icon?: string;
}

const {
	variant = 'secondary',
	target,
	text = Astro.slots.render('default'),
	icon = '',
	class: className = '',
	type,
	...rest
} = Astro.props as Props;

const variants = {
	primary:
		'bg-accent-500 text-accent-900 px-8 py-4 rounded-lg font-semibold text-lg hover:bg-accent-400 transition-all duration-300 flex items-center space-x-2 shadow-lg hover:shadow-xl transform hover:-translate-y-1',
	secondary:
		'border-2 border-white text-white px-8 py-4 rounded-lg font-semibold text-lg hover:bg-white hover:text-primary-900 transition-all duration-300',
	tertiary:
		'bg-primary-600 text-white px-6 py-2 rounded-lg hover:bg-primary-700 transition-colors font-medium',
	link: 'cursor-pointer hover:text-primary',
};
---

{
	type === 'button' || type === 'submit' || type === 'reset' ? (
		<button
			type={type}
			class:list={[variants[variant] || '', className]}
			{...rest}
		>
			<Fragment set:html={text} />
		</button>
	) : (
		<a
			class:list={[variants[variant] || '', className]}
			{...(target ? { target: target, rel: 'noopener noreferrer' } : {})}
			{...rest}
		>
			<Fragment set:html={text} />
			{icon && (
				<Icon
					name={icon}
					class="w-5 h-5 ml-1 -mr-1.5 rtl:mr-1 rtl:-ml-1.5 inline-block"
				/>
			)}
		</a>
	)
}
